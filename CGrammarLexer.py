# Generated from CGrammar.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,305,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
        18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
        33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,225,8,
        37,10,37,12,37,228,9,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,
        237,8,38,10,38,12,38,240,9,38,1,39,1,39,5,39,244,8,39,10,39,12,39,
        247,9,39,1,39,3,39,250,8,39,1,40,5,40,253,8,40,10,40,12,40,256,9,
        40,1,40,1,40,4,40,260,8,40,11,40,12,40,261,1,41,1,41,5,41,266,8,
        41,10,41,12,41,269,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
        278,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,4,44,300,8,44,11,44,
        12,44,301,1,44,1,44,2,226,254,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,1,0,9,2,0,10,10,13,13,1,0,49,57,1,
        0,48,57,1,0,48,48,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,39,39,1,0,92,92,3,0,9,10,13,13,32,32,313,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,
        0,0,0,5,95,1,0,0,0,7,97,1,0,0,0,9,99,1,0,0,0,11,101,1,0,0,0,13,103,
        1,0,0,0,15,106,1,0,0,0,17,109,1,0,0,0,19,111,1,0,0,0,21,113,1,0,
        0,0,23,115,1,0,0,0,25,117,1,0,0,0,27,119,1,0,0,0,29,121,1,0,0,0,
        31,124,1,0,0,0,33,127,1,0,0,0,35,130,1,0,0,0,37,133,1,0,0,0,39,136,
        1,0,0,0,41,139,1,0,0,0,43,141,1,0,0,0,45,143,1,0,0,0,47,145,1,0,
        0,0,49,147,1,0,0,0,51,150,1,0,0,0,53,155,1,0,0,0,55,161,1,0,0,0,
        57,165,1,0,0,0,59,171,1,0,0,0,61,180,1,0,0,0,63,187,1,0,0,0,65,191,
        1,0,0,0,67,197,1,0,0,0,69,202,1,0,0,0,71,207,1,0,0,0,73,213,1,0,
        0,0,75,220,1,0,0,0,77,232,1,0,0,0,79,249,1,0,0,0,81,254,1,0,0,0,
        83,263,1,0,0,0,85,277,1,0,0,0,87,279,1,0,0,0,89,299,1,0,0,0,91,92,
        5,59,0,0,92,2,1,0,0,0,93,94,5,43,0,0,94,4,1,0,0,0,95,96,5,45,0,0,
        96,6,1,0,0,0,97,98,5,42,0,0,98,8,1,0,0,0,99,100,5,38,0,0,100,10,
        1,0,0,0,101,102,5,33,0,0,102,12,1,0,0,0,103,104,5,43,0,0,104,105,
        5,43,0,0,105,14,1,0,0,0,106,107,5,45,0,0,107,108,5,45,0,0,108,16,
        1,0,0,0,109,110,5,40,0,0,110,18,1,0,0,0,111,112,5,41,0,0,112,20,
        1,0,0,0,113,114,5,47,0,0,114,22,1,0,0,0,115,116,5,37,0,0,116,24,
        1,0,0,0,117,118,5,60,0,0,118,26,1,0,0,0,119,120,5,62,0,0,120,28,
        1,0,0,0,121,122,5,61,0,0,122,123,5,61,0,0,123,30,1,0,0,0,124,125,
        5,60,0,0,125,126,5,61,0,0,126,32,1,0,0,0,127,128,5,62,0,0,128,129,
        5,61,0,0,129,34,1,0,0,0,130,131,5,33,0,0,131,132,5,61,0,0,132,36,
        1,0,0,0,133,134,5,38,0,0,134,135,5,38,0,0,135,38,1,0,0,0,136,137,
        5,124,0,0,137,138,5,124,0,0,138,40,1,0,0,0,139,140,5,61,0,0,140,
        42,1,0,0,0,141,142,5,44,0,0,142,44,1,0,0,0,143,144,5,123,0,0,144,
        46,1,0,0,0,145,146,5,125,0,0,146,48,1,0,0,0,147,148,5,105,0,0,148,
        149,5,102,0,0,149,50,1,0,0,0,150,151,5,101,0,0,151,152,5,108,0,0,
        152,153,5,115,0,0,153,154,5,101,0,0,154,52,1,0,0,0,155,156,5,119,
        0,0,156,157,5,104,0,0,157,158,5,105,0,0,158,159,5,108,0,0,159,160,
        5,101,0,0,160,54,1,0,0,0,161,162,5,102,0,0,162,163,5,111,0,0,163,
        164,5,114,0,0,164,56,1,0,0,0,165,166,5,98,0,0,166,167,5,114,0,0,
        167,168,5,101,0,0,168,169,5,97,0,0,169,170,5,107,0,0,170,58,1,0,
        0,0,171,172,5,99,0,0,172,173,5,111,0,0,173,174,5,110,0,0,174,175,
        5,116,0,0,175,176,5,105,0,0,176,177,5,110,0,0,177,178,5,117,0,0,
        178,179,5,101,0,0,179,60,1,0,0,0,180,181,5,114,0,0,181,182,5,101,
        0,0,182,183,5,116,0,0,183,184,5,117,0,0,184,185,5,114,0,0,185,186,
        5,110,0,0,186,62,1,0,0,0,187,188,5,105,0,0,188,189,5,110,0,0,189,
        190,5,116,0,0,190,64,1,0,0,0,191,192,5,102,0,0,192,193,5,108,0,0,
        193,194,5,111,0,0,194,195,5,97,0,0,195,196,5,116,0,0,196,66,1,0,
        0,0,197,198,5,99,0,0,198,199,5,104,0,0,199,200,5,97,0,0,200,201,
        5,114,0,0,201,68,1,0,0,0,202,203,5,118,0,0,203,204,5,111,0,0,204,
        205,5,105,0,0,205,206,5,100,0,0,206,70,1,0,0,0,207,208,5,99,0,0,
        208,209,5,111,0,0,209,210,5,110,0,0,210,211,5,115,0,0,211,212,5,
        116,0,0,212,72,1,0,0,0,213,214,5,112,0,0,214,215,5,114,0,0,215,216,
        5,105,0,0,216,217,5,110,0,0,217,218,5,116,0,0,218,219,5,102,0,0,
        219,74,1,0,0,0,220,221,5,47,0,0,221,222,5,42,0,0,222,226,1,0,0,0,
        223,225,9,0,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,227,1,0,0,0,
        226,224,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,42,0,0,
        230,231,5,47,0,0,231,76,1,0,0,0,232,233,5,47,0,0,233,234,5,47,0,
        0,234,238,1,0,0,0,235,237,8,0,0,0,236,235,1,0,0,0,237,240,1,0,0,
        0,238,236,1,0,0,0,238,239,1,0,0,0,239,78,1,0,0,0,240,238,1,0,0,0,
        241,245,7,1,0,0,242,244,7,2,0,0,243,242,1,0,0,0,244,247,1,0,0,0,
        245,243,1,0,0,0,245,246,1,0,0,0,246,250,1,0,0,0,247,245,1,0,0,0,
        248,250,7,3,0,0,249,241,1,0,0,0,249,248,1,0,0,0,250,80,1,0,0,0,251,
        253,7,2,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,255,1,0,0,0,254,
        252,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,259,5,46,0,0,258,
        260,7,2,0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,
        262,1,0,0,0,262,82,1,0,0,0,263,267,7,4,0,0,264,266,7,5,0,0,265,264,
        1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,84,1,
        0,0,0,269,267,1,0,0,0,270,271,7,6,0,0,271,272,9,0,0,0,272,278,7,
        6,0,0,273,274,7,6,0,0,274,275,7,7,0,0,275,276,9,0,0,0,276,278,7,
        6,0,0,277,270,1,0,0,0,277,273,1,0,0,0,278,86,1,0,0,0,279,280,5,35,
        0,0,280,281,5,105,0,0,281,282,5,110,0,0,282,283,5,99,0,0,283,284,
        5,108,0,0,284,285,5,117,0,0,285,286,5,100,0,0,286,287,5,101,0,0,
        287,288,5,32,0,0,288,289,5,60,0,0,289,290,5,115,0,0,290,291,5,116,
        0,0,291,292,5,100,0,0,292,293,5,105,0,0,293,294,5,111,0,0,294,295,
        5,46,0,0,295,296,5,104,0,0,296,297,5,62,0,0,297,88,1,0,0,0,298,300,
        7,8,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,
        1,0,0,0,302,303,1,0,0,0,303,304,6,44,0,0,304,90,1,0,0,0,10,0,226,
        238,245,249,254,261,267,277,301,1,6,0,0
    ]

class CGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    BLOCKCOMMENT = 38
    SINGLE_LINE_COMMENT = 39
    INT = 40
    FLOAT = 41
    IDENTIFIER = 42
    CHAR = 43
    IO = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'+'", "'-'", "'*'", "'&'", "'!'", "'++'", "'--'", "'('", 
            "')'", "'/'", "'%'", "'<'", "'>'", "'=='", "'<='", "'>='", "'!='", 
            "'&&'", "'||'", "'='", "','", "'{'", "'}'", "'if'", "'else'", 
            "'while'", "'for'", "'break'", "'continue'", "'return'", "'int'", 
            "'float'", "'char'", "'void'", "'const'", "'printf'", "'#include <stdio.h>'" ]

    symbolicNames = [ "<INVALID>",
            "BLOCKCOMMENT", "SINGLE_LINE_COMMENT", "INT", "FLOAT", "IDENTIFIER", 
            "CHAR", "IO", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "BLOCKCOMMENT", 
                  "SINGLE_LINE_COMMENT", "INT", "FLOAT", "IDENTIFIER", "CHAR", 
                  "IO", "WS" ]

    grammarFileName = "CGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


